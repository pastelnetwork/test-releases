version: 2.1

defaults: &defaults
  parameters:
    version:
      type: string
      default: "latest"
  docker:
    - image: "circleci/golang:<< parameters.version >>"
  environment:
    GO111MODULE: "on"

commands:
  test:
    parameters:
      package:
        type: string
    steps:
      - run:
          name: "<< parameters.package >>: Fetch dependencies"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go get -v ./...
      - run:
          name: "<< parameters.package >>: Run gofmt"
          working_directory: ~/project/<< parameters.package >>
          command: |
            diff -u <(echo -n) <(gofmt -d -e .)
      - run:
          name: "<< parameters.package >>: Run go vet"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go vet -v ./...
      - run:
          name: "<< parameters.package >>: Run revive"
          working_directory: ~/project/<< parameters.package >>
          command: |
            revive -config ~/project/.circleci/revive.toml ./...
      - run:
          name: "<< parameters.package >>: Run staticcheck"
          working_directory: ~/project/<< parameters.package >>
          command: |
            staticcheck ./...
      - run:
          name: "<< parameters.package >>: Run go test (+ race detector)"
          working_directory: ~/project/<< parameters.package >>
          command: |
            go test -v -race ./...
  build:
    parameters:
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          sourcesContainerName: "sourcesContainer"
          buildContainerName: << parameters.buildContainerName >>
          moduleSubDir: << parameters.moduleSubDir >>
          package: << parameters.package >>
          targets: << parameters.targets >>
          outputDirectory: "build"

  release:
    parameters:
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          sourcesContainerName: "sourcesContainer"
          buildContainerName: << parameters.buildContainerName >>
          moduleSubDir: << parameters.moduleSubDir >>
          package: << parameters.package >>
          targets: << parameters.targets >>
          outputDirectory: "build"
      - github-upload-all-os:
          working_directory: "~/project/build/github.com/pastelnetwork/gonode"
          binaryName: << parameters.binaryName >>
          repo: "test-releases"

  create-sources-container:
    parameters:
      containerName:
        type: string
    steps:
      - run:
          name: "Create named docker container << parameters.containerName >> with project's sources"
          command: |
            docker create -v /source --name << parameters.containerName >> ubuntu:18.04 /bin/true
            docker cp ./. << parameters.containerName >>:/source

  xgo-build:
    parameters:
      sourcesContainerName:
        type: string
      buildContainerName:
        type: string
      moduleSubDir:
        type: string
      package:
        type: string
      targets:
        type: string
      outputDirectory:
        type: string
    steps:
      - run:
          name: "<< parameters.moduleSubDir >> << parameters.package >>: xgo build for << parameters.targets >>"
          command: |
            GOPATH= xgo -go go-1.16.x --targets=<< parameters.targets >>  -moduleSubDir=<< parameters.moduleSubDir >> -pkg=<< parameters.package >> -volumesFrom=<< parameters.sourcesContainerName >> -dockerRM=false -dockerContainerName=<< parameters.buildContainerName >> ./

            mkdir -p << parameters.outputDirectory >>
            docker cp << parameters.buildContainerName >>:/build/. ./<< parameters.outputDirectory >>
            ls -R ./<< parameters.outputDirectory >>

  github-release:
    parameters:
      working_directory:
        type: string
      uploadFilePath:
        type: string
      publishFileName:
        type: string
      repo:
        type: string
    steps:
      - run:
          name: Upload << parameters.uploadFilePath >> to GitHub
          working_directory: << parameters.working_directory >>
          command: |
            github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.publishFileName >> --file << parameters.uploadFilePath >>

  github-upload-all-os:
    parameters:
      working_directory:
        type: string
      binaryName:
        type: string
      repo:
        type: string
    steps:
      - github-release:
          working_directory: << parameters.working_directory >>
          uploadFilePath: << parameters.binaryName >>-darwin-10.14-amd64
          publishFileName: << parameters.binaryName >>-darwin-amd64
          repo: << parameters.repo >>
      - github-release:
          working_directory: << parameters.working_directory >>
          uploadFilePath: << parameters.binaryName >>-windows-4.0-amd64.exe
          publishFileName: << parameters.binaryName >>-windows-amd64.exe
          repo: << parameters.repo >>
      - github-release:
          working_directory: << parameters.working_directory >>
          uploadFilePath: << parameters.binaryName >>-linux-amd64
          publishFileName: << parameters.binaryName >>-linux-amd64
          repo: << parameters.repo >>

jobs:
  # Run automated tests
  test:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Print the go version
          command: |
            go version
      - run:
          name: Install swig
          command: |
            sudo apt-get install -y swig
      - run:
          name: Install libtensorflow
          command: |
            wget https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo tar -C /usr/local -xzf ./libtensorflow-cpu-linux-x86_64-2.4.0.tar.gz
            sudo /sbin/ldconfig -v
      - run:
          name: Install revive
          command: |
            GO111MODULE=off go get -u github.com/mgechev/revive
      - run:
          name: Install staticcheck
          command: |
            GO111MODULE=off go get -u honnef.co/go/tools/cmd/staticcheck
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true
      - run:
          name: Install xgo
          command: |
            go install -v github.com/pastelnetwork/xgo@48be1f35b934924c998997a8470ffdb6a022b968
      - build:
          buildContainerName: "pqsignatures"
          moduleSubDir: "pqsignatures"
          package: "cmd/pqsignatures"
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "pqsignatures"
      - build:
          buildContainerName: "walletnode"
          moduleSubDir: "walletnode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "walletnode"
      - build:
          buildContainerName: "supernode"
          moduleSubDir: "supernode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "supernode"
      - test:
          package: "common"
      - test:
          package: "pastel"
      - test:
          package: "tools/pastel-api"
      - test:
          package: "proto"
      - test:
          package: "legroast"
      - test:
          package: "dupe-detection"
      - test:
          package: "pqsignatures"
      - test:
          package: "walletnode"
      - test:
          package: "supernode"

  # Whenever we create a GitHub release, build binaries for each OS, and upload them into the release
  release:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true
      - run:
          name: Install github-release
          command: |
            GO111MODULE=off go get github.com/github-release/github-release
      - run:
          name: Install xgo
          command: |
            go install -v github.com/pastelnetwork/xgo@48be1f35b934924c998997a8470ffdb6a022b968
      - create-sources-container:
          containerName: "sourcesContainer"
      - release:
          buildContainerName: "pqsignatures"
          moduleSubDir: "pqsignatures"
          package: "cmd/pqsignatures"
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "pqsignatures"
      - release:
          buildContainerName: "walletnode"
          moduleSubDir: "walletnode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "walletnode"
      - release:
          buildContainerName: "supernode"
          moduleSubDir: "supernode"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "supernode"

workflows:
  build-and-test:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
      - release:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          context:
            - Release
